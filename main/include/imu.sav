#include <math.h>


static void imu_init (spi_device_handle_t device) 
{
   writeByte( device, 0x19, 0x00); /* Sample Rate Div not used in rates >= 1K */
   writeByte( device, 0x1a, 0x00); /* Config - fifo overflow, no sync*/
   writeByte( device, 0x1b, 0x00); /* Gyro Config - range +/-250dps, bypass dlpf 8Ksamp 250LP*/
   writeByte( device, 0x1c, 0x00); /* Accel Config - range +/-2g */
   writeByte( device, 0x1d, 0x0c); /* Accel Config 1 -x00 4ksamp 1khz/1ksamp 0x08=200hz x0a=100 x0e=5 x0f=420 */
   writeByte( device, 0x23, 0x78); /* fifo enable - gyroscope and accel */
   writeByte( device, 0x6b, 0x00); /* Power Management 1 */
   writeByte( device, 0x6c, 0x00); /* Power Management 2 */
   writeByte( device, 0x6a, 0x40); /* User Control - enable fifo*/
   writeByte( device, 0x68, 0x07); /* Signal Path Reset */
}

void imu_read(void * unused)
{
    uint8_t temp_buffer[32];
    uint8_t buffer[1024];
    float calx=0, caly=0, calz=0;
    float gcalx=0, gcaly=0, gcalz=0;
    float xAccl_last=0, yAccl_last=0, zAccl_last=0, xFusion_last=0, yFusion_last=0, zGyro_last=0;
    float xAccl_cal=0, yAccl_cal=0, zAccl_cal=0, xGyro_cal=0, yGyro_cal=0, zGyro_cal=0;
    float rateg = 0.001/8;
    float ratea = 0.001;
    float Accl_T    = (0.50/ratea)/(1+0.50/ratea); 
    float xFusion_T = (0.50/rateg)/(1+0.50/rateg); 
    float yFusion_T = (0.50/rateg)/(1+0.50/rateg); 
    float zGyro_T   = (1.00/rateg)/(1+1.00/rateg); 

    writeByte( spi, 0x6a, 0x44); /* reset fifo */
    while (1) {
        readBytes(spi, 0x72, 2, temp_buffer);
        int samples = 256 * temp_buffer[0] + temp_buffer[1];
        if(samples > 256)samples=256;  //max size of system
        samples = samples / 12;
        if(samples>0){ readBytes(spi, 0x74, 12 * samples, buffer); }
        for (int n = 0; n <samples; n++){
            nsamp++;
            //accelerometers raw calibrated and filtered - 1K sample rate (1/8 of gyro)
            if ((nsamp % 8) == 1){
                xAccl = (float)(256 * buffer[12*n+0] + buffer[12*n+1]);
                if(xAccl>0x8000)xAccl = -1.0*(0xffff - xAccl) ; 
                xAccl = xAccl / 0x4000;
                xAccl = xAccl - xAccl_cal;
                xAccl_LP = Accl_T * xAccl_last + (1 - Accl_T) * xAccl;
                xAccl_last = xAccl_LP;

                yAccl = (float)(256 * buffer[12*n+2] + buffer[12*n+3]);
                if(yAccl>0x8000)yAccl = -1.0 * (0xffff - yAccl);
                yAccl = yAccl / 0x4000;
                yAccl = yAccl - yAccl_cal;
                yAccl_LP = Accl_T * yAccl_last + (1 - Accl_T) * yAccl;
                yAccl_last = yAccl_LP;

                zAccl = (float)(256 * buffer[12*n+4] + buffer[12*n+5]);
                if(zAccl>0x8000)zAccl = -1.0 * (0xffff - zAccl );
                zAccl = zAccl / 0x4000;
                zAccl = zAccl - zAccl_cal;
                zAccl_LP = Accl_T * zAccl_last + (1 - Accl_T) * zAccl;
                zAccl_last = zAccl_LP;
            }
            //Gyros raw calibrated and Integral at full 8K sample rate
            xGyro = (float)(256 * buffer[12*n+6] + buffer[12*n+7]);
            if(xGyro>0x8000)xGyro = -1.0*(0xffff - xGyro) ; 
            xGyro = 0.001 * xGyro * 250.00 / 0x8000;
            //xGyro_Int = xGyro_Int + xGyro - xGyro_cal;

            yGyro = (float)(256 * buffer[12*n+8] + buffer[12*n+9]);
            if(yGyro>0x8000)yGyro = -1.0 * (0xffff - yGyro);
            yGyro = 0.001 * yGyro * 250.00 / 0x8000;
            //yGyro_Int = yGyro_Int + yGyro - yGyro_cal;

            zGyro = (float)(256 * buffer[12*n+10] + buffer[12*n+11]);
            if(zGyro>0x8000)zGyro = -1.0 * (0xffff - zGyro );
            zGyro = 0.001 * zGyro * 250.00 / 0x8000;
            zGyro = zGyro - zGyro_cal;
            zGyro_Int = zGyro_Int + zGyro;
            //Gyro Int high pass filter
            zGyro_Int_HP = zGyro_T * zGyro_last + zGyro;
            zGyro_last = zGyro_Int_HP;

            //sensor fusion 'complimentary filter' LP filter on Accelerometer and HP filter on gyro
            //cant be updated at 8K or fifo over flows - going for 100Hz 
            if ((nsamp % 80) == 1){
                theta = -1.0 * asin(xAccl_LP / sqrt(xAccl_LP*xAccl_LP+zAccl_LP*zAccl_LP));
                phi   =  1.0 * asin(yAccl_LP / sqrt(yAccl_LP*yAccl_LP+zAccl_LP*zAccl_LP));
            }
            xFusion = xFusion_T * xFusion_last + (1 - xFusion_T) * 57.3 * phi   + (xGyro - xGyro_cal)/8 ;
            if (xFusion == xFusion)xFusion_last = xFusion;  //test for NAN
            yFusion = yFusion_T * yFusion_last + (1 - yFusion_T) * 57.3 * theta + (yGyro - yGyro_cal)/8 ;
            if (yFusion == yFusion)yFusion_last = yFusion;

            //calibration routine runs for about 1/4sec averages 500 measurements
            if (cal_cnt <= 2000){
                if(cal_cnt == 0 ) {
                   xAccl = 0; yAccl = 0; zAccl = 0; xGyro = 0; yGyro = 0; zGyro = 0;
                   calx = 0.0; caly = 0.0; calz = 0.0; gcalx = 0.0;
                   gcaly = 0.0; gcalz = 0.0; } 
                else if(cal_cnt >= 1500 && cal_cnt < 2000) {
                   calx = calx + xAccl; caly = caly + yAccl; calz = calz + zAccl;
                   gcalx = gcalx + xGyro; gcaly = gcaly + yGyro; gcalz = gcalz + zGyro;
                }
                else if(cal_cnt ==  2000) {
                   xAccl_cal = calx / 500; yAccl_cal = caly / 500; zAccl_cal = calz / 500;
                   xGyro_cal = gcalx / 500; yGyro_cal = gcaly / 500; zGyro_cal = gcalz / 500;
                   zAccl_cal = zAccl_cal - 1.0;  //gravity orientation
                   zGyro_Int = 0;
                   printf( "cal   %f %f %f     ", calx/500,caly/500,calz/500);
                   printf( "   %f %f %f \n", gcalx/500,gcaly/500,gcalz/500);
                }
                ++cal_cnt;
            } //end of cal
        } //end of samples
    } //end of while 1
} //end of task
